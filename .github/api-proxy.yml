name: API Proxy for Orders

on:
  # Opci√≥n 1: Se dispara con cualquier push (F√ÅCIL)
  push:
    branches: [ main, master ]
    paths:
      - 'orders/**'  # Solo si hay cambios en carpeta orders
  
  # Opci√≥n 2: Webhook manual desde el repositorio
  repository_dispatch:
    types: [process_order]
  
  # Opci√≥n 3: Endpoint HTTP p√∫blico usando Issues (RECOMENDADO)
  issues:
    types: [opened]
  
  # Opci√≥n 4: Webhook schedule para procesar pedidos pendientes
  schedule:
    - cron: '*/5 * * * *'  # Cada 5 minutos

jobs:
  process-order:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for new orders
        id: check_orders
        run: |
          echo "üîç Verificando nuevos pedidos..."
          
          # Verificar si hay archivo de pedido nuevo
          if [ -f "orders/pending.json" ]; then
            echo "üìã Pedido encontrado en archivo"
            ORDER_DATA=$(cat orders/pending.json)
            echo "order_data=$ORDER_DATA" >> $GITHUB_OUTPUT
            echo "has_order=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "issues" ]; then
            echo "üìã Pedido encontrado en issue"
            ISSUE_BODY='${{ github.event.issue.body }}'
            echo "order_data=$ISSUE_BODY" >> $GITHUB_OUTPUT
            echo "has_order=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "üìã Pedido encontrado en dispatch"
            ORDER_DATA='${{ toJson(github.event.client_payload) }}'
            echo "order_data=$ORDER_DATA" >> $GITHUB_OUTPUT
            echo "has_order=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No hay pedidos nuevos"
            echo "has_order=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate Order Data
        if: steps.check_orders.outputs.has_order == 'true'
        run: |
          echo "üîç Validando datos del pedido..."
          ORDER_DATA='${{ steps.check_orders.outputs.order_data }}'
          echo "Datos recibidos: $ORDER_DATA"
          
      - name: Forward to N8N
        if: steps.check_orders.outputs.has_order == 'true'
        run: |
          echo "üì§ Enviando a N8N..."
          
          # Obtener datos del pedido
          ORDER_DATA='${{ steps.check_orders.outputs.order_data }}'
          
          # Enviar a n8n
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "User-Agent: LaMonaGitHubProxy/1.0" \
            -d "$ORDER_DATA" \
            "${{ secrets.N8N_WEBHOOK_URL }}")
          
          # Separar respuesta y c√≥digo HTTP
          body=$(echo $response | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
          status=$(echo $response | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')
          
          echo "Status: $status"
          echo "Response: $body"
          
          if [[ $status -eq 200 ]] || [[ $status -eq 201 ]]; then
            echo "‚úÖ Pedido enviado exitosamente a n8n"
            
            # Limpiar archivo de pedido procesado
            if [ -f "orders/pending.json" ]; then
              rm orders/pending.json
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add -A
              git commit -m "üßπ Pedido procesado y archivo limpiado" || exit 0
              git push
            fi
            
            # Cerrar issue si fue procesado desde issue
            if [ "${{ github.event_name }}" == "issues" ]; then
              curl -X PATCH \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.KEY_VAULT }}" \
                https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} \
                -d '{"state":"closed"}'
            fi
            
          else
            echo "‚ùå Error enviando a n8n: Status $status"
            exit 1
          fi
          
      - name: Log Success
        if: success() && steps.check_orders.outputs.has_order == 'true'
        run: |
          echo "üéâ Pedido procesado exitosamente"
          echo "Timestamp: $(date)"

